/*
 * Marketplace
 * This is a place where sellers and buyers meat each other
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdCreateRequest;
import org.openapitools.client.model.AdCreateResponse;
import org.openapitools.client.model.AdDeleteRequest;
import org.openapitools.client.model.AdDeleteResponse;
import org.openapitools.client.model.AdOffersRequest;
import org.openapitools.client.model.AdOffersResponse;
import org.openapitools.client.model.AdReadRequest;
import org.openapitools.client.model.AdReadResponse;
import org.openapitools.client.model.AdSearchRequest;
import org.openapitools.client.model.AdSearchResponse;
import org.openapitools.client.model.AdUpdateRequest;
import org.openapitools.client.model.AdUpdateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdApi {
    private ApiClient localVarApiClient;

    public AdApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for adCreate
     * @param adCreateRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adCreateCall(AdCreateRequest adCreateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = adCreateRequest;

        // create path and map variables
        String localVarPath = "/ad/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adCreateValidateBeforeCall(AdCreateRequest adCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'adCreateRequest' is set
        if (adCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'adCreateRequest' when calling adCreate(Async)");
        }
        

        okhttp3.Call localVarCall = adCreateCall(adCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create ad
     * 
     * @param adCreateRequest Request body (required)
     * @return AdCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AdCreateResponse adCreate(AdCreateRequest adCreateRequest) throws ApiException {
        ApiResponse<AdCreateResponse> localVarResp = adCreateWithHttpInfo(adCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create ad
     * 
     * @param adCreateRequest Request body (required)
     * @return ApiResponse&lt;AdCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdCreateResponse> adCreateWithHttpInfo(AdCreateRequest adCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = adCreateValidateBeforeCall(adCreateRequest, null);
        Type localVarReturnType = new TypeToken<AdCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create ad (asynchronously)
     * 
     * @param adCreateRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adCreateAsync(AdCreateRequest adCreateRequest, final ApiCallback<AdCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adCreateValidateBeforeCall(adCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<AdCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adDelete
     * @param adDeleteRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adDeleteCall(AdDeleteRequest adDeleteRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = adDeleteRequest;

        // create path and map variables
        String localVarPath = "/ad/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adDeleteValidateBeforeCall(AdDeleteRequest adDeleteRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'adDeleteRequest' is set
        if (adDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'adDeleteRequest' when calling adDelete(Async)");
        }
        

        okhttp3.Call localVarCall = adDeleteCall(adDeleteRequest, _callback);
        return localVarCall;

    }

    /**
     * Delete ad
     * 
     * @param adDeleteRequest Request body (required)
     * @return AdDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AdDeleteResponse adDelete(AdDeleteRequest adDeleteRequest) throws ApiException {
        ApiResponse<AdDeleteResponse> localVarResp = adDeleteWithHttpInfo(adDeleteRequest);
        return localVarResp.getData();
    }

    /**
     * Delete ad
     * 
     * @param adDeleteRequest Request body (required)
     * @return ApiResponse&lt;AdDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdDeleteResponse> adDeleteWithHttpInfo(AdDeleteRequest adDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = adDeleteValidateBeforeCall(adDeleteRequest, null);
        Type localVarReturnType = new TypeToken<AdDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete ad (asynchronously)
     * 
     * @param adDeleteRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adDeleteAsync(AdDeleteRequest adDeleteRequest, final ApiCallback<AdDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adDeleteValidateBeforeCall(adDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<AdDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adOffers
     * @param adOffersRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adOffersCall(AdOffersRequest adOffersRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = adOffersRequest;

        // create path and map variables
        String localVarPath = "/ad/offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adOffersValidateBeforeCall(AdOffersRequest adOffersRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'adOffersRequest' is set
        if (adOffersRequest == null) {
            throw new ApiException("Missing the required parameter 'adOffersRequest' when calling adOffers(Async)");
        }
        

        okhttp3.Call localVarCall = adOffersCall(adOffersRequest, _callback);
        return localVarCall;

    }

    /**
     * Search offers
     * 
     * @param adOffersRequest Request body (required)
     * @return AdOffersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AdOffersResponse adOffers(AdOffersRequest adOffersRequest) throws ApiException {
        ApiResponse<AdOffersResponse> localVarResp = adOffersWithHttpInfo(adOffersRequest);
        return localVarResp.getData();
    }

    /**
     * Search offers
     * 
     * @param adOffersRequest Request body (required)
     * @return ApiResponse&lt;AdOffersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdOffersResponse> adOffersWithHttpInfo(AdOffersRequest adOffersRequest) throws ApiException {
        okhttp3.Call localVarCall = adOffersValidateBeforeCall(adOffersRequest, null);
        Type localVarReturnType = new TypeToken<AdOffersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search offers (asynchronously)
     * 
     * @param adOffersRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adOffersAsync(AdOffersRequest adOffersRequest, final ApiCallback<AdOffersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adOffersValidateBeforeCall(adOffersRequest, _callback);
        Type localVarReturnType = new TypeToken<AdOffersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adRead
     * @param adReadRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adReadCall(AdReadRequest adReadRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = adReadRequest;

        // create path and map variables
        String localVarPath = "/ad/read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adReadValidateBeforeCall(AdReadRequest adReadRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'adReadRequest' is set
        if (adReadRequest == null) {
            throw new ApiException("Missing the required parameter 'adReadRequest' when calling adRead(Async)");
        }
        

        okhttp3.Call localVarCall = adReadCall(adReadRequest, _callback);
        return localVarCall;

    }

    /**
     * Read ad
     * 
     * @param adReadRequest Request body (required)
     * @return AdReadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AdReadResponse adRead(AdReadRequest adReadRequest) throws ApiException {
        ApiResponse<AdReadResponse> localVarResp = adReadWithHttpInfo(adReadRequest);
        return localVarResp.getData();
    }

    /**
     * Read ad
     * 
     * @param adReadRequest Request body (required)
     * @return ApiResponse&lt;AdReadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdReadResponse> adReadWithHttpInfo(AdReadRequest adReadRequest) throws ApiException {
        okhttp3.Call localVarCall = adReadValidateBeforeCall(adReadRequest, null);
        Type localVarReturnType = new TypeToken<AdReadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read ad (asynchronously)
     * 
     * @param adReadRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adReadAsync(AdReadRequest adReadRequest, final ApiCallback<AdReadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adReadValidateBeforeCall(adReadRequest, _callback);
        Type localVarReturnType = new TypeToken<AdReadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adSearch
     * @param adSearchRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adSearchCall(AdSearchRequest adSearchRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = adSearchRequest;

        // create path and map variables
        String localVarPath = "/ad/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adSearchValidateBeforeCall(AdSearchRequest adSearchRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'adSearchRequest' is set
        if (adSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'adSearchRequest' when calling adSearch(Async)");
        }
        

        okhttp3.Call localVarCall = adSearchCall(adSearchRequest, _callback);
        return localVarCall;

    }

    /**
     * Search ad
     * 
     * @param adSearchRequest Request body (required)
     * @return AdSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AdSearchResponse adSearch(AdSearchRequest adSearchRequest) throws ApiException {
        ApiResponse<AdSearchResponse> localVarResp = adSearchWithHttpInfo(adSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Search ad
     * 
     * @param adSearchRequest Request body (required)
     * @return ApiResponse&lt;AdSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdSearchResponse> adSearchWithHttpInfo(AdSearchRequest adSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = adSearchValidateBeforeCall(adSearchRequest, null);
        Type localVarReturnType = new TypeToken<AdSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search ad (asynchronously)
     * 
     * @param adSearchRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adSearchAsync(AdSearchRequest adSearchRequest, final ApiCallback<AdSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adSearchValidateBeforeCall(adSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<AdSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adUpdate
     * @param adUpdateRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adUpdateCall(AdUpdateRequest adUpdateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = adUpdateRequest;

        // create path and map variables
        String localVarPath = "/ad/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adUpdateValidateBeforeCall(AdUpdateRequest adUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'adUpdateRequest' is set
        if (adUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'adUpdateRequest' when calling adUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = adUpdateCall(adUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Update ad
     * 
     * @param adUpdateRequest Request body (required)
     * @return AdUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AdUpdateResponse adUpdate(AdUpdateRequest adUpdateRequest) throws ApiException {
        ApiResponse<AdUpdateResponse> localVarResp = adUpdateWithHttpInfo(adUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update ad
     * 
     * @param adUpdateRequest Request body (required)
     * @return ApiResponse&lt;AdUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdUpdateResponse> adUpdateWithHttpInfo(AdUpdateRequest adUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = adUpdateValidateBeforeCall(adUpdateRequest, null);
        Type localVarReturnType = new TypeToken<AdUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update ad (asynchronously)
     * 
     * @param adUpdateRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adUpdateAsync(AdUpdateRequest adUpdateRequest, final ApiCallback<AdUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adUpdateValidateBeforeCall(adUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<AdUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
